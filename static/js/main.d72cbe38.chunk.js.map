{"version":3,"sources":["logo.svg","Game.js","App.js","index.js"],"names":["Game","props","shuffleArray","array","i","length","j","Math","floor","random","className","shuffleWords","Object","entries","Colors","map","color","name","selected","validColor","backgroundColor","onClick","checkAnswer","ColorButton","style","ColorWord","border","Rouge","Jaune","Vert","Bleu","Noir","Orange","Violet","Marron","Turquoise","BrainGame","useState","gameId","setGameId","correctAnswers","setCorrectAnswers","secondsLeft","pickRandomColor","setValidColor","colorChosen","App","src","logo","alt","ReactDOM","render","document","getElementById"],"mappings":"8MAAe,G,KAAA,IAA0B,kC,8BCwDnCA,EAAO,SAACC,GAEZ,SAASC,EAAaC,GACpB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADD,EAElB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAMG,GAFwB,KAI3C,OAAOH,EAYT,OACE,sBAAKO,UAAU,OAAf,UACE,qBAAKA,UAAU,cAAf,SACGR,EAXP,SAAsBC,GACpB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADD,EAEZ,CAACD,EAAMG,GAAG,GAAIH,EAAMC,GAAG,IAAnDD,EAAMC,GAAG,GAF+B,KAE3BD,EAAMG,GAAG,GAFkB,KAI3C,OAAOH,EAMWQ,CAAaC,OAAOC,QAAQC,KAAUC,KAAI,SAACC,GAAD,OACtD,cAAC,EAAD,CAEEC,KAAMD,EAAM,GACZA,MAAOA,EAAM,GACbE,SAAUF,EAAM,KAAOf,EAAMkB,YAHxBH,EAAM,SAOjB,qBAAKN,UAAU,eAAf,SACGR,EAAaU,OAAOC,QAAQC,IAASC,KAAI,SAACC,GAAD,OACxC,cAAC,EAAD,CAEEC,KAAMD,EAAM,GACZI,gBAAiBJ,EAAM,GACvBK,QAAS,kBAAMpB,EAAMqB,YAAYN,EAAM,MAHlCA,EAAM,aAYjBO,EAAc,SAACtB,GACnB,OACE,wBACES,UAAU,eACVc,MAAO,CAAEJ,gBAAiBnB,EAAMmB,iBAChCC,QAASpB,EAAMoB,WAMfI,EAAY,SAACxB,GACjB,OACE,qBACES,UAAU,YACVc,MAAO,CACLE,QAA2B,IAAnBzB,EAAMiB,SAAoB,aAAejB,EAAMe,MAAQ,QAHnE,SAME,sBAAMQ,MAAO,CAAER,MAAOf,EAAMe,OAA5B,SAAsCf,EAAMgB,UAM5CH,EAAS,CACba,MAAO,MACPC,MAAO,UACPC,KAAM,QACNC,KAAM,OACNC,KAAM,QACNC,OAAQ,SACRC,OAAQ,SACRC,OAAQ,cACRC,UAAW,aAGEC,EAxIG,WAKhB,MAA4BC,mBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA4CF,mBAAS,GAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KACA,EAAsCJ,mBAAS,IAA/C,mBAAOK,EAAP,KACA,GADA,KACoCL,mBAClCM,EAAgB/B,OAAOC,QAAQC,MADjC,mBAAOK,EAAP,KAAmByB,EAAnB,KAeA,SAASD,EAAgBxC,GAEvB,OAAOA,EADGI,KAAKC,MAAMD,KAAKE,SAAWN,EAAME,SAC3B,GAclB,OACE,qCACE,cAAC,EAAD,CAEEc,WAAYA,EACZG,YAbN,SAA6BuB,GACvBA,IAAgB1B,GAClBsB,EAAkBD,EAAiB,GAErCI,EAAcD,EAAgB/B,OAAOC,QAAQC,KAC7CyB,EAAUD,EAAS,KAMVA,GAIP,sBAAK5B,UAAU,UAAf,iCAA2C8B,KAC3C,sBAAK9B,UAAU,QAAf,iCAA4CgC,SCjCnCI,EAbH,WAGV,OACE,sBAAKpC,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKqC,IAAKC,EAAMtC,UAAU,WAAWuC,IAAI,SAD3C,0BAIA,cAAC,EAAD,QCRNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.d72cbe38.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import './Game.css';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst BrainGame = () => {\r\n  // BrainGame component\r\n  // Sets the game and calculates scores\r\n  // Resets words and colors\r\n  // Deals with timer\r\n  const [gameId, setGameId] = useState(1);\r\n  const [correctAnswers, setCorrectAnswers] = useState(0);\r\n  const [secondsLeft, setSecondsLeft] = useState(60);\r\n  const [validColor, setValidColor] = useState(\r\n    pickRandomColor(Object.entries(Colors))\r\n  );\r\n\r\n  // deals with timer\r\n  /*useEffect(() => {\r\n    if (secondsLeft > 0) {\r\n      const timerId = setTimeout(() => {\r\n        setSecondsLeft(secondsLeft - 1);\r\n      }, 1000);\r\n      return () => clearTimeout(timerId);\r\n    }\r\n  });*/\r\n\r\n  // Randomly chooses a color between the list of available colors\r\n  function pickRandomColor(array) {\r\n    const j = Math.floor(Math.random() * array.length);\r\n    return array[j][0];\r\n  }\r\n\r\n  // compares answer given and valid color\r\n  // increments correct answers if needed\r\n  // resets words\r\n  function checkAnswerAndReset(colorChosen) {\r\n    if (colorChosen === validColor) {\r\n      setCorrectAnswers(correctAnswers + 1);\r\n    }\r\n    setValidColor(pickRandomColor(Object.entries(Colors)));\r\n    setGameId(gameId + 1);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Game\r\n        key={gameId}\r\n        validColor={validColor}\r\n        checkAnswer={checkAnswerAndReset}\r\n      />\r\n      <div className=\"answers\">Bonnes r√©ponses: {correctAnswers}</div>\r\n      <div className=\"timer\">Secondes restantes: {secondsLeft}</div>\r\n    </>\r\n  );\r\n};\r\n\r\n// one instance of the game\r\nconst Game = (props) => {\r\n  // function that shuffles an array\r\n  function shuffleArray(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n  }\r\n\r\n  // function that mixes words and colors\r\n  function shuffleWords(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [array[i][1], array[j][1]] = [array[j][1], array[i][1]];\r\n    }\r\n    return array;\r\n  }\r\n\r\n  return (\r\n    <div className=\"Game\">\r\n      <div className=\"Game__Words\">\r\n        {shuffleArray(shuffleWords(Object.entries(Colors))).map((color) => (\r\n          <ColorWord\r\n            key={color[0]}\r\n            name={color[0]}\r\n            color={color[1]}\r\n            selected={color[0] === props.validColor}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className=\"Game__Colors\">\r\n        {shuffleArray(Object.entries(Colors)).map((color) => (\r\n          <ColorButton\r\n            key={color[0]}\r\n            name={color[0]}\r\n            backgroundColor={color[1]}\r\n            onClick={() => props.checkAnswer(color[0])}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// component displaying the colors\r\nconst ColorButton = (props) => {\r\n  return (\r\n    <button\r\n      className=\"Game__Button\"\r\n      style={{ backgroundColor: props.backgroundColor }}\r\n      onClick={props.onClick}\r\n    ></button>\r\n  );\r\n};\r\n\r\n// component displaying the game words\r\nconst ColorWord = (props) => {\r\n  return (\r\n    <div\r\n      className=\"Game__Div\"\r\n      style={{\r\n        border: props.selected === true ? '5px solid ' + props.color : 'none',\r\n      }}\r\n    >\r\n      <span style={{ color: props.color }}>{props.name}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\n// list of available colors\r\nconst Colors = {\r\n  Rouge: 'red',\r\n  Jaune: '#FFFF00',\r\n  Vert: 'green',\r\n  Bleu: 'blue',\r\n  Noir: 'black',\r\n  Orange: 'orange',\r\n  Violet: 'violet',\r\n  Marron: 'saddlebrown',\r\n  Turquoise: 'turquoise',\r\n};\r\n\r\nexport default BrainGame;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport BrainGame from './Game';\n\nconst App = () => {\n  // App Component\n  // Displays header and BrainGame component\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        Play with your brain\n      </header>\n      <BrainGame />\n    </div>\n  );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}