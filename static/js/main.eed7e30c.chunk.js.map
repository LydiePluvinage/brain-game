{"version":3,"sources":["Game.js","Timer.js","App.js","index.js"],"names":["Game","props","className","words","map","color","name","selected","validColor","colors","backgroundColor","onClick","checkAnswer","PlayAgain","score","ColorButton","style","ColorWord","border","Colors","Rouge","Jaune","Vert","Bleu","Noir","Orange","Violet","Marron","Turquoise","BrainGame","useState","gameId","setGameId","correctAnswers","setCorrectAnswers","pickRandomColor","Object","entries","setValidColor","shuffleArray","colorsList","setColorsList","shuffleWords","wordsList","setWordsList","array","i","length","j","Math","floor","random","startNewGame","newGame","over","playing","colorChosen","Timer","seconds","secondsLeft","setSecondsLeft","useEffect","timerId","setTimeout","clearTimeout","App","setPlaying","nbGame","setNbGame","handlePlaying","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eed7e30c.chunk.js","sourcesContent":["import './Game.css';\r\nimport React, { useState } from 'react';\r\n\r\nconst BrainGame = (props) => {\r\n  // BrainGame component\r\n  // Sets the game and calculates scores\r\n  // Resets words and colors\r\n  // Deals with timer\r\n  const [gameId, setGameId] = useState(1);\r\n  const [correctAnswers, setCorrectAnswers] = useState(0);\r\n  const [validColor, setValidColor] = useState(\r\n    pickRandomColor(Object.entries(Colors))\r\n  );\r\n  const [colorsList, setColorsList] = useState(\r\n    shuffleArray(Object.entries(Colors))\r\n  );\r\n  const [wordsList, setWordsList] = useState(\r\n    shuffleArray(shuffleWords(Object.entries(Colors)))\r\n  );\r\n\r\n  // function that shuffles an array\r\n  function shuffleArray(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * i);\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n  }\r\n\r\n  // function that mixes words and colors\r\n  function shuffleWords(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * i);\r\n\r\n      [array[i][1], array[j][1]] = [array[j][1], array[i][1]];\r\n    }\r\n    return array;\r\n  }\r\n\r\n  // Randomly chooses a color between the list of available colors\r\n  function pickRandomColor(array) {\r\n    const j = Math.floor(Math.random() * array.length);\r\n    return array[j][0];\r\n  }\r\n\r\n  // compares answer given and valid color\r\n  // increments correct answers if needed\r\n  // resets words\r\n  function checkAnswerAndReset(colorChosen) {\r\n    if (colorChosen === validColor) {\r\n      setCorrectAnswers(correctAnswers + 1);\r\n    }\r\n    startNewGame(false);\r\n  }\r\n\r\n  // resets all state elements for the new game\r\n  function startNewGame(newGame) {\r\n    setValidColor(pickRandomColor(Object.entries(Colors)));\r\n    setWordsList(shuffleArray(shuffleWords(Object.entries(Colors))));\r\n    setColorsList(shuffleArray(Object.entries(Colors)));\r\n    setGameId(0);\r\n    if (newGame) {\r\n      setCorrectAnswers(0);\r\n      setGameId(0);\r\n      props.over();\r\n    } else {\r\n      setGameId(gameId + 1);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"Game__Description\">\r\n        Choisissez la couleur correspondant au mot entouré. Vous avez 60\r\n        secondes.\r\n      </div>\r\n      {!props.playing ? (\r\n        <PlayAgain score={correctAnswers} onClick={() => startNewGame} />\r\n      ) : (\r\n        <>\r\n          <Game\r\n            key={gameId}\r\n            validColor={validColor}\r\n            checkAnswer={checkAnswerAndReset}\r\n            colors={colorsList}\r\n            words={wordsList}\r\n          />\r\n          <div className=\"Game__Answers\">Bonnes réponses: {correctAnswers}</div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\n// one instance of the game\r\nconst Game = (props) => {\r\n  return (\r\n    <div className=\"Game\">\r\n      <div className=\"Game__Words\">\r\n        {props.words.map((color) => (\r\n          <ColorWord\r\n            key={color[0]}\r\n            name={color[0]}\r\n            color={color[1]}\r\n            selected={color[0] === props.validColor}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className=\"Game__Colors\">\r\n        {props.colors.map((color) => (\r\n          <ColorButton\r\n            key={color[0]}\r\n            name={color[0]}\r\n            backgroundColor={color[1]}\r\n            onClick={() => props.checkAnswer(color[0])}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// play again button, when timer is over\r\nconst PlayAgain = (props) => (\r\n  <>\r\n    <div className=\"Game__Over\">{'Votre score est de ' + props.score}</div>\r\n    <button onClick={props.onClick(true)}>Rejouez</button>\r\n  </>\r\n);\r\n\r\n// component displaying the colors\r\nconst ColorButton = (props) => {\r\n  return (\r\n    <button\r\n      className=\"Game__Button\"\r\n      style={{ backgroundColor: props.backgroundColor }}\r\n      onClick={props.onClick}\r\n    ></button>\r\n  );\r\n};\r\n\r\n// component displaying the game words\r\nconst ColorWord = (props) => {\r\n  return (\r\n    <div\r\n      className=\"Game__Div\"\r\n      style={{\r\n        border: props.selected === true ? '5px solid ' + props.color : 'none',\r\n      }}\r\n    >\r\n      <span style={{ color: props.color }}>{props.name}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\n// list of available colors\r\nconst Colors = {\r\n  Rouge: 'red',\r\n  Jaune: '#FFFF00',\r\n  Vert: 'green',\r\n  Bleu: 'blue',\r\n  Noir: 'black',\r\n  Orange: 'orange',\r\n  Violet: 'darkviolet',\r\n  Marron: 'saddlebrown',\r\n  Turquoise: 'turquoise',\r\n};\r\n\r\nexport default BrainGame;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nconst Timer = (props) => {\r\n  const [secondsLeft, setSecondsLeft] = useState(props.seconds);\r\n  // deals with timer\r\n\r\n  useEffect(() => {\r\n    if (secondsLeft > 0) {\r\n      const timerId = setTimeout(() => {\r\n        setSecondsLeft(secondsLeft - 1);\r\n      }, 1000);\r\n      return () => clearTimeout(timerId);\r\n    } else if (props.playing === true) {\r\n      props.over();\r\n    }\r\n  });\r\n\r\n  return <div className=\"Game__Timer\">Secondes restantes: {secondsLeft}</div>;\r\n};\r\n\r\nexport default Timer;\r\n","//import logo from './logo.svg';\nimport './App.css';\nimport BrainGame from './Game';\nimport Timer from './Timer';\nimport { useState } from 'react';\n\nconst App = () => {\n  const nbSeconds = 7;\n  const [playing, setPlaying] = useState(true);\n  const [nbGame, setNbGame] = useState(1);\n  // App Component\n  // Displays header and BrainGame component\n  // <img src={logo} className=\"App__Logo\" alt=\"logo\" />\n\n  const handlePlaying = () => {\n    if (playing === true) {\n      setPlaying(false);\n    } else {\n      setPlaying(true);\n      setNbGame(nbGame + 1);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__Header\">Play with your brain</header>\n      <BrainGame playing={playing} over={handlePlaying} />\n      {playing && (\n        <Timer\n          seconds={nbSeconds}\n          playing={playing}\n          over={handlePlaying}\n          key={nbGame}\n        />\n      )}\n    </div>\n  );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}