{"version":3,"sources":["logo.svg","Game.js","App.js","index.js"],"names":["Game","props","className","words","map","color","name","selected","validColor","colors","backgroundColor","onClick","checkAnswer","PlayAgain","score","ColorButton","style","ColorWord","border","Colors","Rouge","Jaune","Vert","Bleu","Noir","Orange","Violet","Marron","Turquoise","BrainGame","useState","gameId","setGameId","correctAnswers","setCorrectAnswers","secondsLeft","setSecondsLeft","pickRandomColor","Object","entries","setValidColor","shuffleArray","colorsList","setColorsList","shuffleWords","wordsList","setWordsList","useEffect","timerId","setTimeout","clearTimeout","gameOver","array","i","length","j","Math","floor","random","startNewGame","newGame","console","log","colorChosen","App","src","logo","alt","ReactDOM","render","document","getElementById"],"mappings":"8MAAe,G,KAAA,IAA0B,kC,8BC2GnCA,EAAO,SAACC,GACZ,OACE,sBAAKC,UAAU,OAAf,UACE,qBAAKA,UAAU,cAAf,SACGD,EAAME,MAAMC,KAAI,SAACC,GAAD,OACf,cAAC,EAAD,CAEEC,KAAMD,EAAM,GACZA,MAAOA,EAAM,GACbE,SAAUF,EAAM,KAAOJ,EAAMO,YAHxBH,EAAM,SAOjB,qBAAKH,UAAU,eAAf,SACGD,EAAMQ,OAAOL,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAEEC,KAAMD,EAAM,GACZK,gBAAiBL,EAAM,GACvBM,QAAS,kBAAMV,EAAMW,YAAYP,EAAM,MAHlCA,EAAM,aAYjBQ,EAAY,SAACZ,GAAD,OAChB,qCACE,qBAAKC,UAAU,YAAf,SAA4B,sBAAwBD,EAAMa,QAC1D,wBAAQH,QAASV,EAAMU,SAAQ,GAA/B,yBAKEI,EAAc,SAACd,GACnB,OACE,wBACEC,UAAU,eACVc,MAAO,CAAEN,gBAAiBT,EAAMS,iBAChCC,QAASV,EAAMU,WAMfM,EAAY,SAAChB,GACjB,OACE,qBACEC,UAAU,YACVc,MAAO,CACLE,QAA2B,IAAnBjB,EAAMM,SAAoB,aAAeN,EAAMI,MAAQ,QAHnE,SAME,sBAAMW,MAAO,CAAEX,MAAOJ,EAAMI,OAA5B,SAAsCJ,EAAMK,UAM5Ca,EAAS,CACbC,MAAO,MACPC,MAAO,UACPC,KAAM,QACNC,KAAM,OACNC,KAAM,QACNC,OAAQ,SACRC,OAAQ,SACRC,OAAQ,cACRC,UAAW,aAGEC,EAjLG,WAKhB,MAA4BC,mBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA4CF,mBAAS,GAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KACA,EAAsCJ,mBAAS,IAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KACA,EAAoCN,mBAClCO,EAAgBC,OAAOC,QAAQpB,KADjC,mBAAOX,EAAP,KAAmBgC,EAAnB,KAGA,EAAoCV,mBAClCW,EAAaH,OAAOC,QAAQpB,KAD9B,mBAAOuB,EAAP,KAAmBC,EAAnB,KAGA,EAAkCb,mBAChCW,EAAaG,EAAaN,OAAOC,QAAQpB,MAD3C,mBAAO0B,EAAP,KAAkBC,EAAlB,KAKAC,qBAAU,WACR,GAAIZ,EAAc,EAAG,CACnB,IAAMa,EAAUC,YAAW,WACzBb,EAAeD,EAAc,KAC5B,KACH,OAAO,kBAAMe,aAAaF,QAI9B,IAAMG,EAA2B,IAAhBhB,EAKjB,SAASM,EAAaW,GACpB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,SAAWL,GADI,EAElB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAMG,GAFwB,KAI3C,OAAOH,EAIT,SAASR,EAAaQ,GACpB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,SAAWL,GADI,EAGZ,CAACD,EAAMG,GAAG,GAAIH,EAAMC,GAAG,IAAnDD,EAAMC,GAAG,GAH+B,KAG3BD,EAAMG,GAAG,GAHkB,KAK3C,OAAOH,EAIT,SAASf,EAAgBe,GAEvB,OAAOA,EADGI,KAAKC,MAAMD,KAAKE,SAAWN,EAAME,SAC3B,GAclB,SAASK,EAAaC,GACpBpB,EAAcH,EAAgBC,OAAOC,QAAQpB,KAC7C2B,EAAaL,EAAaG,EAAaN,OAAOC,QAAQpB,MACtDwB,EAAcF,EAAaH,OAAOC,QAAQpB,KAC1Ca,EAAU,GACN4B,GACF1B,EAAkB,GAClBF,EAAU,GACVI,EAAe,KAEfJ,EAAUD,EAAS,GAIvB,OArDA8B,QAAQC,IAAI3B,GACZ0B,QAAQC,IAAIX,GAqDV,oCACgB,IAAbA,EACC,cAAC,EAAD,CAAWrC,MAAOmB,EAAgBtB,QAAS,kBAAMgD,KAEjD,qCACE,cAAC,EAAD,CAEEnD,WAAYA,EACZI,YA/BV,SAA6BmD,GACvBA,IAAgBvD,GAClB0B,EAAkBD,EAAiB,GAErC0B,GAAa,IA4BLlD,OAAQiC,EACRvC,MAAO0C,GAJFd,GAMP,sBAAK7B,UAAU,UAAf,iCAA2C+B,KAC3C,sBAAK/B,UAAU,QAAf,iCAA4CiC,WClFvC6B,EAbH,WAGV,OACE,sBAAK9D,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,qBAAK+D,IAAKC,EAAMhE,UAAU,WAAWiE,IAAI,SAD3C,0BAIA,cAAC,EAAD,QCRNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.b78785ed.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import './Game.css';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst BrainGame = () => {\r\n  // BrainGame component\r\n  // Sets the game and calculates scores\r\n  // Resets words and colors\r\n  // Deals with timer\r\n  const [gameId, setGameId] = useState(1);\r\n  const [correctAnswers, setCorrectAnswers] = useState(0);\r\n  const [secondsLeft, setSecondsLeft] = useState(60);\r\n  const [validColor, setValidColor] = useState(\r\n    pickRandomColor(Object.entries(Colors))\r\n  );\r\n  const [colorsList, setColorsList] = useState(\r\n    shuffleArray(Object.entries(Colors))\r\n  );\r\n  const [wordsList, setWordsList] = useState(\r\n    shuffleArray(shuffleWords(Object.entries(Colors)))\r\n  );\r\n\r\n  // deals with timer\r\n  useEffect(() => {\r\n    if (secondsLeft > 0) {\r\n      const timerId = setTimeout(() => {\r\n        setSecondsLeft(secondsLeft - 1);\r\n      }, 1000);\r\n      return () => clearTimeout(timerId);\r\n    }\r\n  });\r\n\r\n  const gameOver = secondsLeft === 0;\r\n  console.log(secondsLeft);\r\n  console.log(gameOver);\r\n\r\n  // function that shuffles an array\r\n  function shuffleArray(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * i);\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n  }\r\n\r\n  // function that mixes words and colors\r\n  function shuffleWords(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * i);\r\n\r\n      [array[i][1], array[j][1]] = [array[j][1], array[i][1]];\r\n    }\r\n    return array;\r\n  }\r\n\r\n  // Randomly chooses a color between the list of available colors\r\n  function pickRandomColor(array) {\r\n    const j = Math.floor(Math.random() * array.length);\r\n    return array[j][0];\r\n  }\r\n\r\n  // compares answer given and valid color\r\n  // increments correct answers if needed\r\n  // resets words\r\n  function checkAnswerAndReset(colorChosen) {\r\n    if (colorChosen === validColor) {\r\n      setCorrectAnswers(correctAnswers + 1);\r\n    }\r\n    startNewGame(false);\r\n  }\r\n\r\n  // resets all state elements for the new game\r\n  function startNewGame(newGame) {\r\n    setValidColor(pickRandomColor(Object.entries(Colors)));\r\n    setWordsList(shuffleArray(shuffleWords(Object.entries(Colors))));\r\n    setColorsList(shuffleArray(Object.entries(Colors)));\r\n    setGameId(0);\r\n    if (newGame) {\r\n      setCorrectAnswers(0);\r\n      setGameId(0);\r\n      setSecondsLeft(60);\r\n    } else {\r\n      setGameId(gameId + 1);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {gameOver === true ? (\r\n        <PlayAgain score={correctAnswers} onClick={() => startNewGame} />\r\n      ) : (\r\n        <>\r\n          <Game\r\n            key={gameId}\r\n            validColor={validColor}\r\n            checkAnswer={checkAnswerAndReset}\r\n            colors={colorsList}\r\n            words={wordsList}\r\n          />\r\n          <div className=\"answers\">Bonnes r√©ponses: {correctAnswers}</div>\r\n          <div className=\"timer\">Secondes restantes: {secondsLeft}</div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\n// one instance of the game\r\nconst Game = (props) => {\r\n  return (\r\n    <div className=\"Game\">\r\n      <div className=\"Game__Words\">\r\n        {props.words.map((color) => (\r\n          <ColorWord\r\n            key={color[0]}\r\n            name={color[0]}\r\n            color={color[1]}\r\n            selected={color[0] === props.validColor}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className=\"Game__Colors\">\r\n        {props.colors.map((color) => (\r\n          <ColorButton\r\n            key={color[0]}\r\n            name={color[0]}\r\n            backgroundColor={color[1]}\r\n            onClick={() => props.checkAnswer(color[0])}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// play again button, when timer is over\r\nconst PlayAgain = (props) => (\r\n  <>\r\n    <div className=\"Game-Over\">{'Votre score est de ' + props.score}</div>\r\n    <button onClick={props.onClick(true)}>Rejouez</button>\r\n  </>\r\n);\r\n\r\n// component displaying the colors\r\nconst ColorButton = (props) => {\r\n  return (\r\n    <button\r\n      className=\"Game__Button\"\r\n      style={{ backgroundColor: props.backgroundColor }}\r\n      onClick={props.onClick}\r\n    ></button>\r\n  );\r\n};\r\n\r\n// component displaying the game words\r\nconst ColorWord = (props) => {\r\n  return (\r\n    <div\r\n      className=\"Game__Div\"\r\n      style={{\r\n        border: props.selected === true ? '5px solid ' + props.color : 'none',\r\n      }}\r\n    >\r\n      <span style={{ color: props.color }}>{props.name}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\n// list of available colors\r\nconst Colors = {\r\n  Rouge: 'red',\r\n  Jaune: '#FFFF00',\r\n  Vert: 'green',\r\n  Bleu: 'blue',\r\n  Noir: 'black',\r\n  Orange: 'orange',\r\n  Violet: 'violet',\r\n  Marron: 'saddlebrown',\r\n  Turquoise: 'turquoise',\r\n};\r\n\r\nexport default BrainGame;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport BrainGame from './Game';\n\nconst App = () => {\n  // App Component\n  // Displays header and BrainGame component\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        Play with your brain\n      </header>\n      <BrainGame />\n    </div>\n  );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}